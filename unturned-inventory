unturned-inventory/
│
├── render.yaml
services:
  - type: web
    name: unturned-inventory
    env: node
    buildCommand: "npm install"
    startCommand: "node server.js"
    envVars:
      - key: NODE_ENV
        value: production
      - key: SECRET_TOKEN
        value: supersecretkey123
    disk:
      name: market-data
      mountPath: /data
      sizeGB: 1

├── package.json
{
  "name": "unturned-inventory",
  "version": "1.0.0",
  "description": "Free Unturned Steam Inventory Database with market caching and leaderboard",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.19.2",
    "sqlite3": "^5.1.6"
  }
}

├── server.js
import express from "express";
import sqlite3 from "sqlite3";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;
const SECRET_TOKEN = process.env.SECRET_TOKEN || "supersecretkey123";

// SQLite cache
const db = new sqlite3.Database("/data/market_cache.db", (err) => {
  if (err) console.error("❌ Database error:", err);
  else console.log("✅ Connected to market_cache.db");
});

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));

// Cache endpoints
app.get("/api/cache/:item", (req, res) => {
  const { item } = req.params;
  db.get("SELECT * FROM cache WHERE item = ?", [item], (err, row) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(row || {});
  });
});

app.post("/api/cache", (req, res) => {
  const { item, price } = req.body;
  db.run(
    "INSERT OR REPLACE INTO cache (item, price, last_update) VALUES (?, ?, datetime('now'))",
    [item, price],
    (err) => {
      if (err) return res.status(500).json({ error: err.message });
      res.json({ message: "Cached successfully" });
    }
  );
});

app.post("/api/clear-cache", (req, res) => {
  const token = req.headers["x-secret-token"];
  if (token !== SECRET_TOKEN) return res.status(403).json({ error: "Forbidden" });
  db.run("DELETE FROM cache", (err) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ message: "Cache cleared" });
  });
});

// Table setup
db.run(`CREATE TABLE IF NOT EXISTS cache (
  item TEXT PRIMARY KEY,
  price REAL,
  last_update TEXT
)`);

// Server start
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));

├── data/               # SQLite cache will auto-create here
│
└── public/
    └── index.html
